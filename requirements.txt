aiosqlite==0.17.0
asgiref==3.4.1
autopep8==1.5.7
bcrypt==3.2.0
cffi==1.15.0
click==8.0.1
dnspython==1.16.0
fastapi==0.68.0
greenlet==1.1.1
h11==0.12.0
iso8601==0.1.16
motor==2.5.0
passlib==1.7.4
pycodestyle==2.7.0
pycparser==2.20
pydantic==1.8.2
pydentic==0.0.1.dev3
PyJWT==2.2.0
pypika-tortoise==0.1.1
python-decouple==3.4
python-dotenv==0.19.0
python-multipart==0.0.5
python-stdnum==1.16
pytz==2021.3
six==1.16.0
starlette==0.14.2
toml==0.10.2
tortoise-orm==0.17.8
typing-extensions==3.10.0.0
uvicorn==0.14.0



import manageDB
import schemas
import jwt
from os import environ
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from fastapi import FastAPI, Depends, HTTPException, status
from tortoise.contrib.fastapi import register_tortoise

app = FastAPI()

origins = [
    "http://localhost:3000",
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


oauth2Scheme = OAuth2PasswordBearer(tokenUrl="token")
register_tortoise(
    app,
    db_url="sqlite://db.sqlite3",
    modules={"models": ['models']},
    generate_schemas=True,
    add_exception_handlers=True
)
# TODO: manage posts and users


@app.post("/token")
async def generateToken(form_data: OAuth2PasswordRequestForm = Depends()):
    user = await manageDB.authUser(form_data.username, form_data.password)
    if not user:
        return HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid username or password")
    userObj = await schemas.UserPydantic.from_tortoise_orm(user)

    token = jwt.encode(userObj.dict(), str(environ.get("JWT_SECRET")))
    return {"access_token": token, "token_type": "bearer"}


@app.get("/")
async def index(token: str = Depends(oauth2Scheme)):
    return {"the_token": token}


@app.post("/users", response_model=schemas.UserPydanticToken)
async def createUser(user: schemas.UseerInPydantic):
    userObj = await manageDB.createUser(user)
    await userObj.save()
    return await schemas.UserPydanticToken.from_tortoise_orm(userObj)


@app.get("/users/me", response_model=schemas.UserPydantic)
async def getUser(user: schemas.UserPydantic = Depends(manageDB.getCurrentUser)):
    return user


# @app.get("/posts/", response_model=List())
# async def getPosts():
#     posts = await getPosts
#     return posts
